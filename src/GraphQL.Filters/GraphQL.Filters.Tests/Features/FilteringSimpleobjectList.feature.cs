// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace GraphQL.Filters.Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Filtering Simpleobject lists")]
    public partial class FilteringSimpleobjectListsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "FilteringSimpleobjectList.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Filtering Simpleobject lists", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
  #line hidden
#line 4
    testRunner.Given("A Schema with QueryType as Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 5
    testRunner.And("Query has Field SimpleObjects as List of SimpleObjectType", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 6
    testRunner.And("Field SimpleObjects has filtering of SimpleObject", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 7
    testRunner.And("Field SimpleObjects uses SimpleObject filtered list", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 8
    testRunner.When("Create Schema", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("inline filter on equals on strings")]
        public void InlineFilterOnEqualsOnStrings()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("inline filter on equals on strings", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 10
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "StringMember",
                            "IntMember",
                            "DateTimeMember",
                            "DateOnlyMember",
                            "TimeOnlyMember",
                            "DecimalMember"});
                table1.AddRow(new string[] {
                            "String 1",
                            "0",
                            "1/1/2001 00:00",
                            "1/1/2001",
                            "00:00",
                            "0.0"});
                table1.AddRow(new string[] {
                            "String 2",
                            "2",
                            "1/2/2001 00:00",
                            "1/2/2001",
                            "02:00",
                            "2.2"});
#line 11
    testRunner.Given("SimpleObject list", ((string)(null)), table1, "Given ");
#line hidden
#line 15
    testRunner.Given("Query operation FilterSimpleObjectDirectEquals", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 16
    testRunner.When("Executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 17
    testRunner.Then("No errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "stringMember"});
                table2.AddRow(new string[] {
                            "String 2"});
#line 18
    testRunner.Then("Data contains simpleObjects", ((string)(null)), table2, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("inline filter on equals on string field")]
        public void InlineFilterOnEqualsOnStringField()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("inline filter on equals on string field", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 22
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "StringMember",
                            "IntMember",
                            "DateTimeMember",
                            "DateOnlyMember",
                            "TimeOnlyMember",
                            "DecimalMember"});
                table3.AddRow(new string[] {
                            "String 1",
                            "0",
                            "1/1/2001 00:00",
                            "1/1/2001",
                            "00:00",
                            "0.0"});
                table3.AddRow(new string[] {
                            "String 2",
                            "2",
                            "1/2/2001 00:00",
                            "1/2/2001",
                            "02:00",
                            "2.2"});
#line 23
    testRunner.Given("SimpleObject list", ((string)(null)), table3, "Given ");
#line hidden
#line 27
    testRunner.Given("Query operation FilterSimpleObjectDirectFieldEquals", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 28
    testRunner.When("Executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 29
    testRunner.Then("No errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "stringMember"});
#line 30
    testRunner.Then("Data contains simpleObjects", ((string)(null)), table4, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("inline filter with and")]
        public void InlineFilterWithAnd()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("inline filter with and", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 33
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "StringMember",
                            "IntMember",
                            "DateTimeMember",
                            "DateOnlyMember",
                            "TimeOnlyMember",
                            "DecimalMember"});
                table5.AddRow(new string[] {
                            "String 1",
                            "0",
                            "1/1/2001 00:00",
                            "1/1/2001",
                            "00:00",
                            "0.0"});
                table5.AddRow(new string[] {
                            "String 2",
                            "10",
                            "1/2/2001 00:00",
                            "1/2/2001",
                            "02:00",
                            "2.2"});
                table5.AddRow(new string[] {
                            "String 2",
                            "2",
                            "1/2/2001 00:00",
                            "1/2/2001",
                            "02:00",
                            "2.2"});
#line 34
    testRunner.Given("SimpleObject list", ((string)(null)), table5, "Given ");
#line hidden
#line 39
    testRunner.Given("Query operation FilterSimpleObjectDirectAnd", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 40
    testRunner.When("Executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 41
    testRunner.Then("No errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "stringMember",
                            "intMember"});
                table6.AddRow(new string[] {
                            "String 2",
                            "10"});
#line 42
    testRunner.Then("Data contains simpleObjects", ((string)(null)), table6, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("inline filter with andor")]
        public void InlineFilterWithAndor()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("inline filter with andor", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 46
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "StringMember",
                            "IntMember",
                            "DateTimeMember",
                            "DateOnlyMember",
                            "TimeOnlyMember",
                            "DecimalMember"});
                table7.AddRow(new string[] {
                            "String 1",
                            "0",
                            "1/1/2001 00:00",
                            "1/1/2001",
                            "00:00",
                            "0.0"});
                table7.AddRow(new string[] {
                            "String 2",
                            "10",
                            "1/2/2001 00:00",
                            "1/2/2001",
                            "02:00",
                            "2.2"});
                table7.AddRow(new string[] {
                            "String 2",
                            "2",
                            "1/2/2001 00:00",
                            "1/2/2001",
                            "02:00",
                            "2.2"});
#line 47
    testRunner.Given("SimpleObject list", ((string)(null)), table7, "Given ");
#line hidden
#line 52
    testRunner.Given("Query operation FilterSimpleObjectDirectOr", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 53
    testRunner.When("Executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 54
    testRunner.Then("No errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "stringMember",
                            "intMember"});
                table8.AddRow(new string[] {
                            "String 2",
                            "10"});
                table8.AddRow(new string[] {
                            "String 2",
                            "2"});
#line 55
    testRunner.Then("Data contains simpleObjects", ((string)(null)), table8, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("variable filter on equals on strings")]
        public void VariableFilterOnEqualsOnStrings()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("variable filter on equals on strings", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 61
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "StringMember",
                            "IntMember",
                            "DateTimeMember",
                            "DateOnlyMember",
                            "TimeOnlyMember",
                            "DecimalMember"});
                table9.AddRow(new string[] {
                            "String 1",
                            "0",
                            "1/1/2001 00:00",
                            "1/1/2001",
                            "00:00",
                            "0.0"});
                table9.AddRow(new string[] {
                            "String 2",
                            "2",
                            "1/2/2001 00:00",
                            "1/2/2001",
                            "02:00",
                            "2.2"});
#line 62
    testRunner.Given("SimpleObject list", ((string)(null)), table9, "Given ");
#line hidden
#line 66
    testRunner.Given("Query operation FilterSimpleObjectVariableEquals", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 67
    testRunner.Given("Variables:", "filter:\r\n  condition:\r\n    fieldName: StringMember\r\n    operator: equal\r\n    valu" +
                        "e: String 2", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 75
    testRunner.When("Executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 76
    testRunner.Then("No errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "stringMember"});
                table10.AddRow(new string[] {
                            "String 2"});
#line 77
    testRunner.Then("Data contains simpleObjects", ((string)(null)), table10, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("variable filter on equals on int")]
        public void VariableFilterOnEqualsOnInt()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("variable filter on equals on int", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 82
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "StringMember",
                            "IntMember",
                            "DateTimeMember",
                            "DateOnlyMember",
                            "TimeOnlyMember",
                            "DecimalMember"});
                table11.AddRow(new string[] {
                            "String 1",
                            "0",
                            "1/1/2001 00:00",
                            "1/1/2001",
                            "00:00",
                            "0.0"});
                table11.AddRow(new string[] {
                            "String 2",
                            "2",
                            "1/2/2001 00:00",
                            "1/2/2001",
                            "02:00",
                            "2.2"});
                table11.AddRow(new string[] {
                            "String 2",
                            "10",
                            "1/2/2001 00:00",
                            "1/2/2001",
                            "02:00",
                            "2.2"});
#line 83
    testRunner.Given("SimpleObject list", ((string)(null)), table11, "Given ");
#line hidden
#line 88
    testRunner.Given("Query operation FilterSimpleObjectDirectIntEquals", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 89
    testRunner.When("Executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 90
    testRunner.Then("No errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "intMember"});
                table12.AddRow(new string[] {
                            "10"});
#line 91
    testRunner.Then("Data contains simpleObjects", ((string)(null)), table12, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Invalid conditions")]
        public void InvalidConditions()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invalid conditions", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 96
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
  this.FeatureBackground();
#line hidden
#line 97
    testRunner.Given("Query operation FilterSimpleObjectInvalidCondition", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 98
    testRunner.When("Executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 99
    testRunner.Then("Should have errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Invalid filters")]
        public void InvalidFilters()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invalid filters", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 101
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
  this.FeatureBackground();
#line hidden
#line 102
    testRunner.Given("Query operation FilterSimpleObjectInvalidFilter", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 103
    testRunner.When("Executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 104
    testRunner.Then("Should have errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
