schema {
  query: DivingQuery
}

type DivingQuery {
  diver(filter: FilterGraphTypeDiver): Diver
  divers(filter: FilterGraphTypeDiver): [Diver]
  nonNullDivers(filter: FilterGraphTypeDiver): [Diver!]!
  nonNullDiversReadOnly(filter: FilterGraphTypeDiver): [Diver!]!
}

type Diver {
  name: String!
  email: MailAddress
  id: Int!
  bio: String
  birthDate: DateOnly
  courses: [Course!]
  dives: [Dive]
  "Using filters with ActAsSubFilter removes parents if child resolves to null"
  buddies(filter: FilterGraphTypeDiver): [Diver]
  "Using filters without ActAsSubFilter keeps parents if child resolves to null"
  buddiesNoSubfilter(filter: FilterGraphTypeDiver): [Diver]
}

scalar MailAddress

"The `Date` scalar type represents a year, month and day in accordance with the [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) standard. Format is `yyyy-MM-dd`"
scalar DateOnly

type Course {
  name: String!
  started: DateOnly!
  finished: DateOnly
  courseResult: CourseResults!
}

enum CourseResults {
  IN_PROGRESS
  SUCCESS_FULL
  FAILED
}

type Dive {
  location: String!
  on: DateOnly!
  start: TimeOnly!
  end: TimeOnly!
  averageDepth: Float!
  diver: Diver
}

"The `Time` scalar type represents a time in accordance with the [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) standard. Format is `HH:mm:ss.FFFFFFF`."
scalar TimeOnly

input FilterGraphTypeDiver {
  condition: ConditionGraphTypeDiver
  and: AndGraphTypeDiver
  or: OrGraphTypeDiver
  not: NotGraphTypeDiver
  ands: [ConditionGraphTypeDiver!]
  ors: [ConditionGraphTypeDiver!]
  any: AnyGraphTypeDiver
}

input ConditionGraphTypeDiver {
  fieldName: FieldEnumerationGraphTypeDiver
  operator: BinaryCompareEnumTypes
  value: ValueScalar
}

enum FieldEnumerationGraphTypeDiver {
  name
  email
  id
  bio
  birthDate
}

enum BinaryCompareEnumTypes {
  equal
  greater
  greaterOrEqual
  less
  lessOrEqual
  notEqual
}

scalar ValueScalar

input AndGraphTypeDiver {
  left: FilterGraphTypeDiver!
  right: FilterGraphTypeDiver!
}

input OrGraphTypeDiver {
  left: FilterGraphTypeDiver!
  right: FilterGraphTypeDiver!
}

input NotGraphTypeDiver {
  filter: FilterGraphTypeDiver!
}

input AnyGraphTypeDiver {
  courses: FilterGraphTypeCourse
  buddies: FilterGraphTypeDiver
  dives: FilterGraphTypeDive
  buddiesNoSubfilter: FilterGraphTypeDiver
}

input FilterGraphTypeCourse {
  condition: ConditionGraphTypeCourse
  and: AndGraphTypeCourse
  or: OrGraphTypeCourse
  not: NotGraphTypeCourse
  ands: [ConditionGraphTypeCourse!]
  ors: [ConditionGraphTypeCourse!]
}

input ConditionGraphTypeCourse {
  fieldName: FieldEnumerationGraphTypeCourse
  operator: BinaryCompareEnumTypes
  value: ValueScalar
}

enum FieldEnumerationGraphTypeCourse {
  name
  started
  finished
  courseResult
}

input AndGraphTypeCourse {
  left: FilterGraphTypeCourse!
  right: FilterGraphTypeCourse!
}

input OrGraphTypeCourse {
  left: FilterGraphTypeCourse!
  right: FilterGraphTypeCourse!
}

input NotGraphTypeCourse {
  filter: FilterGraphTypeCourse!
}

input FilterGraphTypeIDive {
  condition: ConditionGraphTypeIDive
  and: AndGraphTypeIDive
  or: OrGraphTypeIDive
  not: NotGraphTypeIDive
  ands: [ConditionGraphTypeIDive!]
  ors: [ConditionGraphTypeIDive!]
}

input ConditionGraphTypeIDive {
  fieldName: FieldEnumerationGraphTypeIDive
  operator: BinaryCompareEnumTypes
  value: ValueScalar
}

enum FieldEnumerationGraphTypeIDive {
  location
  on
  averageDepth
}

input AndGraphTypeIDive {
  left: FilterGraphTypeIDive!
  right: FilterGraphTypeIDive!
}

input OrGraphTypeIDive {
  left: FilterGraphTypeIDive!
  right: FilterGraphTypeIDive!
}

input NotGraphTypeIDive {
  filter: FilterGraphTypeIDive!
}

input FilterGraphTypeDive {
  condition: ConditionGraphTypeDive
  and: AndGraphTypeDive
  or: OrGraphTypeDive
  not: NotGraphTypeDive
  ands: [ConditionGraphTypeDive!]
  ors: [ConditionGraphTypeDive!]
}

input ConditionGraphTypeDive {
  fieldName: FieldEnumerationGraphTypeDive
  operator: BinaryCompareEnumTypes
  value: ValueScalar
}

enum FieldEnumerationGraphTypeDive {
  location
  on
  start
  end
  averageDepth
  diver
}

input AndGraphTypeDive {
  left: FilterGraphTypeDive!
  right: FilterGraphTypeDive!
}

input OrGraphTypeDive {
  left: FilterGraphTypeDive!
  right: FilterGraphTypeDive!
}

input NotGraphTypeDive {
  filter: FilterGraphTypeDive!
}