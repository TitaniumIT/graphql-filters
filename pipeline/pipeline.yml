trigger:
  branches:
    include:
      - main

variables:
  - name: majorMinorVersion
    value: 0.0
  - name: semanticVersion
    value: $[counter(format("{0}-{1}",variables['majorMinorVersion'],variables['Build.Reason']), 0)]
  - group: ApiKeys
  
name: $(majorMinorVersion).$(semanticVersion)

stages:
  - ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
      - stage: Validation
        displayName: Validate 'Build.Reason'
        jobs:
          - job: build_test
            steps:
              - task: DotNetCoreCLI@2
                displayName: Build
                inputs:
                  command: build
                  workingDirectory: src/GraphQL.Filters
                  versioningScheme: byBuildNumber
                  arguments: --configuration Release 
                  configuration: Release
              - task: DotNetCoreCLI@2
                displayName: UnitTest
                inputs:
                  command: test
                  workingDirectory: src/GraphQL.Filters
                  arguments: --configuration Release --no-build --no-restore
  - ${{ if ne(variables['Build.Reason'], 'PullRequest') }}:
      - stage: BuildAndPublish
        displayName: Build and publi
        jobs: 
          - job: build
            steps:
              - task: DotNetCoreCLI@2
                displayName: Build
                inputs:
                  command: build
                  workingDirectory: src/GraphQL.Filters
                  versioningScheme: byBuildNumber
                  arguments: --configuration Release -p:Version=$(majorMinorVersion).$(semanticVersion)
                  configuration: Release
              - task: DotNetCoreCLI@2
                displayName: Pack
                inputs:
                  command: pack
                  packagesToPack: '**/*.csproj;!**/*.Tests.csproj'
                  versioningScheme: byBuildNumber
                  configuration: Release
                  nobuild: true
                  verbosityPack: Minimal
              - publish: '$(Build.ArtifactStagingDirectory)'
                artifact: packages
          - job: publish
            displayName: publish to nuget
            dependsOn: build
            condition: false
            steps:
              - checkout: none
              - download: current
                artifact: packages
              - script: |
                  dotnet nuget push "$(Pipeline.Workspace)/packages/*.nupkg"  -k $(dotnettool) -s https://api.nuget.org/v3/index.json